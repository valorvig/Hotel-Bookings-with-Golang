
{{define "base"}}

	<!doctype html> <!--how the web page should run this html-->
	<html lang="en">
		<head>
			<!-- Required meta tags -->
			<meta charset="utf-8"> <!--can accept other character-->
			<meta name="viewport" content="width=device-width, initial-scale=1"> <!--don't scale and shrink tomatch other device-->
			
			<title>My nice page</title>
			
			<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous">
			<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.1.2/dist/css/datepicker-bs4.min.css">
			<link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
			<link rel="stylesheet" type="text/css" href="/static/css/styles.css"> <!--need a slash in the front since we're hitting this from our web server. So it needs to know that the static folder should be found at the root of the application-->

		</head>

		<body>

			<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
				<div class="container-fluid">
					<a class="navbar-brand" href="#">Navbar</a>
					<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
						<span class="navbar-toggler-icon"></span>
					</button>
					<div class="collapse navbar-collapse" id="navbarSupportedContent">
						<ul class="navbar-nav me-auto mb-2 mb-lg-0">
							<li class="nav-item">
								<a class="nav-link active" aria-current="page" href="/">Home</a>
							</li>
							<li class="nav-item">
								<a class="nav-link" href="/about">About</a>
							</li>
							<li class="nav-item dropdown">
								<a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
									Rooms
								</a>
								<ul class="dropdown-menu" aria-labelledby="navbarDropdown">
									<li><a class="dropdown-item" href="/generals-quarters">General's Quarters</a></li>
									<li><a class="dropdown-item" href="/majors-suite">Major's Suite</a></li>
								</ul>
							</li>
							<li class="nav-item">
								<a class="nav-link" href="/search-availability" tabindex="-1" aria-disabled="true">Book Now</a>
							</li>
							<li class="nav-item">
								<a class="nav-link" href="/contact" tabindex="-1" aria-disabled="true">Contact</a>
							</li>
							<li class="nav-item">
								{{if eq .IsAuthenticated 1}}
									<li class="nav-item dropdown">
										<a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
											Admin
										</a>
										<ul class="dropdown-menu" aria-labelledby="navbarDropdown">
											<li><a class="dropdown-item" href="/admin/dashboard">Dashboard</a></li>
											<li><a class="dropdown-item" href="/user/logout">Logout</a></li>
										</ul>
									</li>
									<!-- <a class="nav-link" href="/user/logout" tabindex="-1" aria-disabled="true">Logout</a> -->
								{{else}}
									<a class="nav-link" href="/user/login" tabindex="-1" aria-disabled="true">Login</a>
								{{end}}
							</li>
						</ul>
						
					</div>
				</div>
			</nav>
		
			{{block "content" .}}
				
			{{end}}


			<div class="row my-footer">

				<div class="col">
					Left
				</div>

				<div class="col">
					Middle
				</div>

				<div class="col">
					Right
				</div>

			</div>
			
			<!-- Bootstrap -->
			<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js" integrity="sha384-q2kxQ16AaE6UbzuKqyBE9/u/KzioAlnx2maXQHiDX9d4/zp8Ok3f+M7DPm+Ib6IU" crossorigin="anonymous"></script>
			<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.min.js" integrity="sha384-pQQkAEnwaBkjpqZ8RU1fF1AKtTcHJwFl3pblpTlHXybJjHpMYo79HY3hIi4NKxyj" crossorigin="anonymous"></script>
			<!-- Vanilla JS -->
			<script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.1.2/dist/js/datepicker-full.min.js"></script>
			<!-- notie -->
			<script src="https://unpkg.com/notie"></script>
			<!-- SweetAlert2 -->
			<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
			<script src="/static/js/app.js"></script>
			
			<!-- put js in js section -->
			{{block "js" .}}

    	{{end}}

			<script>
				// attention contains a js object returned from Prompt() to select which function to use
				let attention = Prompt(); // attention is {toast: toast, success: success} from Prompt's return

				/*
				// This should not  fire unless there's actually a date picker on that page, not on every page with the base layout
				const elem = document.getElementById("reservation-dates");
				const rangepicker = new DateRangePicker(elem, {
					// https://mymth.github.io/vanillajs-datepicker/#/options?id=format
					format: "yyy-mm-dd"
				});
				*/

				// Example starter JavaScript for disabling form submissions if there are invalid fields
				(function () {
					'use strict'

					// Fetch all the forms we want to apply custom Bootstrap validation styles to
					var forms = document.querySelectorAll('.needs-validation')

					// Loop over them and prevent submission
					Array.prototype.slice.call(forms)
						.forEach(function (form) {
							form.addEventListener('submit', function (event) {
								if (!form.checkValidity()) {
									event.preventDefault()
									event.stopPropagation()
								}

								form.classList.add('was-validated')
							}, false)
						})
				})()
					
				function notify(msg, msgType) {
					notie.alert({
						type: msgType, // optional, default = 4, enum: [1, 2, 3, 4, 5, 'success', 'warning', 'error', 'info', 'neutral']
						text: msg,
						// stay: Boolean, // optional, default = false
						// time: Number, // optional, default = 3, minimum = 1,
						// position: String // optional, default = 'top', enum: ['top', 'bottom']
					})
				}

				function notifyModal(title, text, icon, confirmButtonText) {
					Swal.fire({
						title: title,
						// text: text,
						html: text,
						icon: icon,
						confirmButtonText: confirmButtonText
					})
				}

				// display error message when the user comes to the page, using Notie
				// try visiting "/reservation-summary" directly without making the reservation to see the result
				{{with .Error}} //if you have some values in Error that's not empty
					notify("{{.}}", "error")
				{{end}}

				// if success
				{{with .Flash}} 
					notify("{{.}}", "success")
				{{end}}

				{{with .Warning}} 
					notify("{{.}}", "warning")
				{{end}}

				// SweetAlert2
				// javascript module - avoid hard codes, edit in one place, and change everywhere
				function Prompt() {

					let toast = function(c) {
						const {
							// default
							msg = "",
							icon = "success",
							position = "top-end",
						} = c;

						const Toast = Swal.mixin({
							// try avoiding hard codes
							toast: true,
							title: msg,
							position: position,
							icon: icon,
							showConfirmButton: false,
							timer: 3000,
							timerProgressBar: true,
							didOpen: (toast) => {
								toast.addEventListener('mouseenter', Swal.stopTimer)
								toast.addEventListener('mouseleave', Swal.resumeTimer)
							}
						})

						Toast.fire({})
					}

					let success = function(c) {
						const {
							msg = "",
							title = "",
							footer = "",
						} = c;

						Swal.fire({
							icon: 'success',
							title: title,
							text: msg,
							footer: footer,
						})
					}

					let error = function(c) {
						const {
							msg = "",
							title = "",
							footer = "",
						} = c;

						Swal.fire({
							icon: 'error',
							title: title,
							text: msg,
							footer: footer,
						})
					}

					// use async since the sweet alert uses await in this one
					async function custom(c) {
						const {
							// allow these things to be specified
							icon = "",
							msg = "",
							title = "",
							showConfirmButton = true,
						} = c;
						
						// Multiple inputs modal
						const { value: result } = await Swal.fire({
							icon: icon,
							title: title,
							html: msg,
							backdrop: false,
							focusConfirm: false,
							showCancelButton: true,
							showConfirmButton: showConfirmButton,

							// Popup lifecycle hook. Synchronously runs before the popup is shown on screen.
							// Initialize the datepicker before the popup
							willOpen: () => {
								if (c.willOpen !== undefined) {
									c.willOpen(); // call willOpen (the same name in this case) from c
								}
							},
							preConfirm: () => {
								return [
									document.getElementById('start').value,
									document.getElementById('end').value
								]
							},
							// Popup lifecycle hook. Asynchronously runs after the popup has been shown on screen.
							didOpen: () => {
								if (c.didOpen !== undefined) {
									c.didOpen();
								}
							}
						})

						// this allows to process code after the swal dialogue is closed (after users click the submit or OK button)
						if (result) {
							// https://sweetalert2.github.io/#handling-dismissals
							// if users didn't hit the cancel button, check if we have any actual values/results
							// if the result is not from clicking the cancel button on the window and not equl to empty, then do something
							if (result.dismiss !== Swal.DismissReason.cancel) { // !== is not equal "exactly"
								if (result.value !== "") {
									if (c.callback != undefined) { // undefined - not assigned a value
										c.callback(result);
									}
								} else {
									c.callback(false);
								}
							} else {
								c.callback(false);
							}
						}
						
					}

					// select each type of alert you want as a sub module
					// return object (a dictionary or a slice of choices)
					return {
						toast: toast,
						success: success,
						error: error,
						custom: custom,
					}
				}

			</script>

		</body>
	</html>

{{end}}




